---
# Create SSL Certificates
- name: Make sure certbot packages are present
  package:
    name:
      - certbot
      - python3-certbot-dns-cloudflare
    state: present

# These credentials are stored in Tower vault and are accessed with variables through an injector
# API key deprecated. Using for simplification because of old repository packages.
- name: Create cloudflare credentials file for certbot
  copy:
    dest: "/etc/ssl/cloudflare_key"
    mode: "0600"
    content: |
      dns_cloudflare_email = {{ cloudflare_email }}
      dns_cloudflare_api_key = {{ cloudflare_api_key }}

- name: Create certificates
  shell: |
    certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/ssl/cloudflare_key \
    -d "{{ item.server_name }}" --non-interactive \
    --agree-tos -m "{{ item.admin_email | default('acintasv@gmail.com') }}"
  with_items: "{{ nginx_vhosts }}"

# Create defined Vhosts
- name: Add managed vhost config files.
  template:
    src: "vhost.conf.j2"
    dest: "{{ nginx_vhost_path }}/{{ item.server_name }}.conf"
    force: "true"
    owner: "root"
    group: "root"
    mode: "0644"
  when: item.state|default('present') != 'absent'
  with_items: "{{ nginx_vhosts }}"
  notify: reload nginx

# Configure DNS records
# Ansible cloudflare module was failing so we resort to curl
- name: Create A record for new vhosts
  shell: |
    curl -X PUT "https://api.cloudflare.com/client/v4/zones/9490ee657cc0bf9d8b4ea94503540b86/dns_records" \
     -H "X-Auth-Email: {{ cloudflare_email }}" \
     -H "X-Auth-Key: {{ cloudflare_api_key }}" \
     -H "Content-Type: application/json" \
     --data '{"type":"A","name":"{{ item.server_name }}","content":"{{ ansible_ssh_host }}","ttl":{},"proxied":false}'
  with_items: "{{ nginx_vhosts }}"
  